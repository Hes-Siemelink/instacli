Test case: Output from for each

Output: something

For each:
  item:
    - one
    - two
    - three
  Output:
    item: ${item}

Expected output:
  - item: one
  - item: two
  - item: three


---
Test case: For each with variable syntax

For each:
  ${item}:
    - one
    - two
    - three
  Output:
    item: ${item}

Expected output:
  - item: one
  - item: two
  - item: three

---
Test case: Recursive output from for each

Output: something

For each:
  item:
    - one
    - two
    - three
  Output: ${output} ${item}

Expected output:
  - something one
  - something one two
  - something one two three


---
Test case: Make sure variables are resolved at right time in Do command

${output}: something else
${test}: [ ]

For each:
  recipe:
    - Mango ice cream
    - Ratatouille
    - Meatballs
  Output: ${recipe}
As: recipes

Assert equals:
  actual: ${recipes}
  expected:
    - Mango ice cream
    - Ratatouille
    - Meatballs

---
Test case: variable in For each

${items}:
  - One
  - Two
  - Three
${test_result}: [ ]

For each:
  item: ${items}
  Output: (${item})
As: test_result

Assert equals:
  - actual: ${test_result}
    expected:
      - (One)
      - (Two)
      - (Three)

---
Test case: For each should replace output variable with empty list

Output: something to begin with

For each:
  nothing: [ ]

  Output: something else

Expected output: [ ]

---
Test case: For each on object

For each:
  ${entry}:
    1: one
    2: two
  Output: ${entry.value} indeed

Expected output:
  1: one indeed
  2: two indeed

---
Test case: For each with variables resolution

Output:
  agents:
    - id: 123
      alias: runner
      description: Remote runner

For each:
  ${agent}: ${output.agents}
  Output:
    name: ${agent.alias} (${agent.description})
    value: ${agent.id}

Expected output:
  - name: runner (Remote runner)
    value: 123
